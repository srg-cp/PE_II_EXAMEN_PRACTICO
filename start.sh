#!/bin/bash

# Script para iniciar MindPlan con Docker

echo "üöÄ Iniciando MindPlan..."

# Verificar si Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker no est√° instalado. Por favor instala Docker primero."
    exit 1
fi

# Verificar si Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose no est√° instalado. Por favor instala Docker Compose primero."
    exit 1
fi

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  dev       Iniciar en modo desarrollo"
    echo "  prod      Iniciar en modo producci√≥n"
    echo "  stop      Detener todos los contenedores"
    echo "  clean     Limpiar contenedores e im√°genes"
    echo "  logs      Mostrar logs de los contenedores"
    echo "  help      Mostrar esta ayuda"
    echo ""
}

# Procesar argumentos
case "$1" in
    "dev")
        echo "üîß Iniciando en modo desarrollo..."
        docker-compose -f docker-compose.dev.yml up --build
        ;;
    "prod")
        echo "üè≠ Iniciando en modo producci√≥n..."
        docker-compose up --build -d
        echo "‚úÖ MindPlan est√° ejecut√°ndose en:"
        echo "   Frontend: http://localhost:3000"
        echo "   Backend API: http://localhost:5000"
        echo "   MongoDB: localhost:27017"
        ;;
    "stop")
        echo "üõë Deteniendo contenedores..."
        docker-compose down
        docker-compose -f docker-compose.dev.yml down
        ;;
    "clean")
        echo "üßπ Limpiando contenedores e im√°genes..."
        docker-compose down --rmi all --volumes
        docker-compose -f docker-compose.dev.yml down --rmi all --volumes
        docker system prune -f
        ;;
    "logs")
        echo "üìã Mostrando logs..."
        docker-compose logs -f
        ;;
    "help"|"")
        show_help
        ;;
    *)
        echo "‚ùå Opci√≥n no v√°lida: $1"
        show_help
        exit 1
        ;;
esac